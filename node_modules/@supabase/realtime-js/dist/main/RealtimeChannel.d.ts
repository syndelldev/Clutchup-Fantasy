import { CHANNEL_STATES } from './lib/constants';
import Push from './lib/push';
import RealtimeClient from './RealtimeClient';
import Timer from './lib/timer';
import RealtimePresence, { PresenceState } from './RealtimePresence';
export declare type RealtimeChannelConfig = {
    /**
     * self option enables client to receive message it broadcast
     * ack option instructs server to acknowlege that broadcast message was received
     */
    broadcast?: {
        self?: boolean;
        ack?: boolean;
    };
    /**
     * key option is used to track presence payload across clients
     */
    presence?: {
        key?: string;
    };
    [key: string]: any;
};
export declare enum REALTIME_LISTEN_TYPES {
    broadcast = "broadcast",
    presence = "presence",
    postgres_changes = "postgres_changes"
}
export declare enum REALTIME_SUBSCRIBE_STATES {
    SUBSCRIBED = "SUBSCRIBED",
    TIMED_OUT = "TIMED_OUT",
    CLOSED = "CLOSED",
    CHANNEL_ERROR = "CHANNEL_ERROR"
}
export default class RealtimeChannel {
    topic: string;
    params: RealtimeChannelConfig;
    socket: RealtimeClient;
    bindings: {
        [key: string]: {
            type: string;
            filter: {
                [key: string]: any;
            };
            callback: Function;
            id?: string;
        }[];
    };
    timeout: number;
    state: CHANNEL_STATES;
    joinedOnce: boolean;
    joinPush: Push;
    rejoinTimer: Timer;
    pushBuffer: Push[];
    presence: RealtimePresence;
    constructor(topic: string, params: RealtimeChannelConfig, socket: RealtimeClient);
    rejoinUntilConnected(): void;
    subscribe(callback?: Function, timeout?: number): RealtimeChannel;
    presenceState(): PresenceState;
    track(payload: {
        [key: string]: any;
    }, opts?: {
        [key: string]: any;
    }): Promise<'ok' | 'timed out' | 'rate limited'>;
    untrack(opts?: {
        [key: string]: any;
    }): Promise<'ok' | 'timed out' | 'rate limited'>;
    /**
     * Registers a callback that will be executed when the channel closes.
     */
    onClose(callback: Function): void;
    /**
     * Registers a callback that will be executed when the channel encounteres an error.
     */
    onError(callback: Function): void;
    on(type: string, filter: {
        [key: string]: any;
    }, callback: Function): this;
    off(type: string, filter: {
        [key: string]: any;
    }): this;
    /**
     * Returns `true` if the socket is connected and the channel has been joined.
     */
    canPush(): boolean;
    push(event: string, payload: {
        [key: string]: any;
    }, timeout?: number): Push;
    send(payload: {
        type: string;
        [key: string]: any;
    }, opts?: {
        [key: string]: any;
    }): Promise<'ok' | 'timed out' | 'rate limited'>;
    updateJoinPayload(payload: {
        [key: string]: any;
    }): void;
    /**
     * Leaves the channel.
     *
     * Unsubscribes from server events, and instructs channel to terminate on server.
     * Triggers onClose() hooks.
     *
     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
     * channel.unsubscribe().receive("ok", () => alert("left!") )
     */
    unsubscribe(timeout?: number): Promise<'ok' | 'timed out' | 'error'>;
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling before dispatching to the channel callbacks.
     * Must return the payload, modified or unmodified.
     */
    onMessage(event: string, payload: any, ref?: string): any;
    isMember(topic: string): boolean;
    joinRef(): string;
    rejoin(timeout?: number): void;
    trigger(type: string, payload?: any, ref?: string): void;
    replyEventName(ref: string): string;
    isClosed(): boolean;
    isErrored(): boolean;
    isJoined(): boolean;
    isJoining(): boolean;
    isLeaving(): boolean;
    private static isEqual;
    private getPayloadRecords;
}
//# sourceMappingURL=RealtimeChannel.d.ts.map