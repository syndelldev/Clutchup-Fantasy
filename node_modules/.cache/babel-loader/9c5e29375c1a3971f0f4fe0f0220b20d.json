{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_LISTEN_TYPES;\n\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"broadcast\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"presence\"] = \"presence\";\n  REALTIME_LISTEN_TYPES[\"postgres_changes\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\n\nexport var REALTIME_SUBSCRIBE_STATES;\n\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n\nexport default class RealtimeChannel {\n  constructor(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let socket = arguments.length > 2 ? arguments[2] : undefined;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this.rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this.onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket.remove(this);\n    });\n    this.onError(reason => {\n      if (this.isLeaving() || this.isClosed()) {\n        return;\n      }\n\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return;\n      }\n\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this.trigger(this.replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n\n    if (this.socket.isConnected()) {\n      this.rejoin();\n    }\n  }\n\n  subscribe(callback) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timeout;\n\n    var _a, _b;\n\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      const {\n        config: {\n          broadcast,\n          presence\n        }\n      } = this.params;\n      this.onError(e => callback && callback('CHANNEL_ERROR', e));\n      this.onClose(() => callback && callback('CLOSED'));\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : []\n      };\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken;\n      }\n\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n      this.rejoin(timeout);\n      this.joinPush.receive('ok', _ref => {\n        let {\n          postgres_changes: serverPostgresFilters\n        } = _ref;\n\n        var _a;\n\n        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);\n\n        if (serverPostgresFilters === undefined) {\n          callback && callback('SUBSCRIBED');\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback('SUBSCRIBED');\n          return;\n        }\n      }).receive('error', error => {\n        callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback && callback('TIMED_OUT');\n        return;\n      });\n    }\n\n    return this;\n  }\n\n  presenceState() {\n    return this.presence.state;\n  }\n\n  track(payload) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'track',\n        payload\n      }, opts.timeout || this.timeout);\n    });\n  }\n\n  untrack() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'untrack'\n      }, opts);\n    });\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   */\n\n\n  onClose(callback) {\n    this.on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   */\n\n\n  onError(callback) {\n    this.on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n\n  on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n\n    return this;\n  }\n\n  off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n      var _a;\n\n      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n    });\n    return this;\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   */\n\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined();\n  }\n\n  push(event, payload) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n\n    let pushEvent = new Push(this, event, payload, timeout);\n\n    if (this.canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n\n  send(payload) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(resolve => {\n      var _a, _b, _c;\n\n      const push = this.push(payload.type, payload, opts.timeout || this.timeout);\n\n      if (push.rateLimited) {\n        resolve('rate limited');\n      }\n\n      if (payload.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n        resolve('ok');\n      }\n\n      push.receive('ok', () => resolve('ok'));\n      push.receive('timeout', () => resolve('timed out'));\n    });\n  }\n\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n\n\n  unsubscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n    this.state = CHANNEL_STATES.leaving;\n\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef());\n    };\n\n    this.rejoinTimer.reset(); // Destroy joinPush to avoid connection timeouts during unscription phase\n\n    this.joinPush.destroy();\n    return new Promise(resolve => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n\n      if (!this.canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    });\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n\n\n  onMessage(event, payload, ref) {\n    return payload;\n  }\n\n  isMember(topic) {\n    return this.topic === topic;\n  }\n\n  joinRef() {\n    return this.joinPush.ref;\n  }\n\n  rejoin() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.isLeaving()) {\n      return;\n    }\n\n    this.socket.leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n\n  trigger(type, payload, ref) {\n    var _a, _b;\n\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this.joinRef()) {\n      return;\n    }\n\n    let handledPayload = this.onMessage(typeLower, payload, ref);\n\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(postgresChanges));\n        }\n\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n\n  replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored;\n  }\n\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n\n    return records;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","Transformers","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","RealtimeChannel","constructor","topic","params","socket","closed","config","Object","broadcast","ack","self","presence","key","timeout","joinPush","join","rejoinTimer","rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","onClose","log","joinRef","remove","onError","reason","isLeaving","isClosed","errored","scheduleTimeout","isJoining","on","reply","payload","ref","trigger","replyEventName","isConnected","rejoin","subscribe","callback","joinedOnce","e","accessTokenPayload","postgres_changes","bindings","_a","map","r","filter","_b","accessToken","access_token","updateJoinPayload","serverPostgresFilters","setAuth","undefined","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","presenceState","track","opts","type","untrack","close","typeLower","toLocaleLowerCase","binding","off","bind","isEqual","canPush","isJoined","startTimeout","Promise","resolve","rateLimited","_c","updatePayload","leaving","destroy","leavePush","leave","onMessage","isMember","leaveOpenTopic","joining","resend","events","indexOf","handledPayload","includes","bindId","bindEvent","ids","data","_d","_e","_f","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","getPayloadRecords","isErrored","obj1","obj2","keys","k","records","convertChangeData","columns","record","old_record"],"sourceRoot":"","sources":["../../src/RealtimeChannel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}