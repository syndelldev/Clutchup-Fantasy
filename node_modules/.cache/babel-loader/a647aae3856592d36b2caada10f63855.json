{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nconst DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n    } // default storage key uses the supabase project ref as a namespace\n\n\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n\n\n  channel(name) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n\n\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n\n\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n\n\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n\n  _getAccessToken() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n\n  _initSupabaseAuthClient(_ref, headers, fetch) {\n    let {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey\n    } = _ref;\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, headers), authHeaders),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      fetch\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, token, source) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","DEFAULT_REALTIME_OPTIONS","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","defaultStorageKey","URL","hostname","DEFAULTS","db","realtime","auth","storageKey","global","settings","_a","_b","_c","_d","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","Object","rest","_h","_listenForAuthEvents","functions","customFetch","storage","from","relation","rpc","fn","args","channel","name","opts","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","token","source","changedAccessToken","setAuth","signOut"],"sourceRoot":"","sources":["../../src/SupabaseClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}