{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\n\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schema,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n\n\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      head = false,\n      count\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(_ref => {\n        let [name, value] = _ref;\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n\n    const headers = Object.assign({}, this.headers);\n\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,SAASC,eAAT,QAAgC,aAAhC;AAGA;;;;;;;;;;;AAUA,eAAc,MAAOC,eAAP,CAAsB;EAclC;;EACA;;;;;;;;;EASAC,YACEC,GADF,EAUQ;IAAA,IARN;MACEC,OAAO,GAAG,EADZ;MAEEC,MAFF;MAGEC;IAHF,CAQM,uEAAF,EAAE;IAEN,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAYG,gCAAQP,eAAR,GAA4BI,OAA5B,CAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;EACD;;EAeDE,IAAI,CAACC,QAAD,EAAiB;IACnB,MAAMN,GAAG,GAAG,IAAIO,GAAJ,CAAQ,GAAG,KAAKP,GAAG,IAAIM,QAAQ,EAA/B,CAAZ;IACA,OAAO,IAAIX,qBAAJ,CAA+BK,GAA/B,EAAoC;MACzCC,OAAO,oBAAO,KAAKA,OAAZ,CADkC;MAEzCC,MAAM,EAAE,KAAKA,MAF4B;MAGzCC,KAAK,EAAE,KAAKA;IAH6B,CAApC,CAAP;EAKD;EAED;;;;;;;;;;;;;;;;;;;;;;;EAqBAK,GAAG,CAIDC,EAJC,EAYK;IAAA,IAPNC,IAOM,uEAPoB,EAOpB;IAAA,IANN;MACEC,IAAI,GAAG,KADT;MAEEC;IAFF,CAMM,uEAAF,EAAE;IASN,IAAIC,MAAJ;IACA,MAAMb,GAAG,GAAG,IAAIO,GAAJ,CAAQ,GAAG,KAAKP,GAAG,QAAQS,EAAE,EAA7B,CAAZ;IACA,IAAIK,IAAJ;;IACA,IAAIH,IAAJ,EAAU;MACRE,MAAM,GAAG,MAAT;MACAT,MAAM,CAACW,OAAP,CAAeL,IAAf,EAAqBM,OAArB,CAA6B,QAAkB;QAAA,IAAjB,CAACC,IAAD,EAAOC,KAAP,CAAiB;QAC7ClB,GAAG,CAACmB,YAAJ,CAAiBC,MAAjB,CAAwBH,IAAxB,EAA8B,GAAGC,KAAK,EAAtC;MACD,CAFD;IAGD,CALD,MAKO;MACLL,MAAM,GAAG,MAAT;MACAC,IAAI,GAAGJ,IAAP;IACD;;IAED,MAAMT,OAAO,qBAAQ,KAAKA,OAAb,CAAb;;IACA,IAAIW,KAAJ,EAAW;MACTX,OAAO,CAAC,QAAD,CAAP,GAAoB,SAASW,KAAK,EAAlC;IACD;;IAED,OAAO,IAAIhB,sBAAJ,CAA2B;MAChCiB,MADgC;MAEhCb,GAFgC;MAGhCC,OAHgC;MAIhCC,MAAM,EAAE,KAAKA,MAJmB;MAKhCY,IALgC;MAMhCX,KAAK,EAAE,KAAKA,KANoB;MAOhCkB,UAAU,EAAE;IAPoB,CAA3B,CAAP;EASD;;AArIiC","names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","Object","from","relation","URL","rpc","fn","args","head","count","method","body","entries","forEach","name","value","searchParams","append","allowEmpty"],"sourceRoot":"","sources":["../../src/PostgrestClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}