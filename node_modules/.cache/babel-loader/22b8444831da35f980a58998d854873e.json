{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  eq(column, value) {\n    this.url.searchParams.append(column, `eq.${value}`);\n    return this;\n  }\n\n  neq(column, value) {\n    this.url.searchParams.append(column, `neq.${value}`);\n    return this;\n  }\n\n  gt(column, value) {\n    this.url.searchParams.append(column, `gt.${value}`);\n    return this;\n  }\n\n  gte(column, value) {\n    this.url.searchParams.append(column, `gte.${value}`);\n    return this;\n  }\n\n  lt(column, value) {\n    this.url.searchParams.append(column, `lt.${value}`);\n    return this;\n  }\n\n  lte(column, value) {\n    this.url.searchParams.append(column, `lte.${value}`);\n    return this;\n  }\n\n  like(column, pattern) {\n    this.url.searchParams.append(column, `like.${pattern}`);\n    return this;\n  }\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(column, `ilike.${pattern}`);\n    return this;\n  }\n\n  is(column, value) {\n    this.url.searchParams.append(column, `is.${value}`);\n    return this;\n  }\n\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(column, `in.(${cleanedValues})`);\n    return this;\n  }\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(column, `sr.${range}`);\n    return this;\n  }\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(column, `nxl.${range}`);\n    return this;\n  }\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(column, `sl.${range}`);\n    return this;\n  }\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(column, `nxr.${range}`);\n    return this;\n  }\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(column, `adj.${range}`);\n    return this;\n  }\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n\n  textSearch(column, query) {\n    let {\n      config,\n      type\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n\n  match(query) {\n    Object.entries(query).forEach(_ref => {\n      let [column, value] = _ref;\n      this.url.searchParams.append(column, `eq.${value}`);\n    });\n    return this;\n  }\n\n  not(column, operator, value) {\n    this.url.searchParams.append(column, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n\n\n  or(filters) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.or` : 'or';\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(column, `${operator}.${value}`);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestTransformBuilder","PostgrestFilterBuilder","eq","column","value","url","searchParams","append","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","contains","Array","isArray","JSON","stringify","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","configPart","undefined","match","Object","entries","forEach","not","operator","or","filters","foreignTable","key","filter"],"sourceRoot":"","sources":["../../src/PostgrestFilterBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}