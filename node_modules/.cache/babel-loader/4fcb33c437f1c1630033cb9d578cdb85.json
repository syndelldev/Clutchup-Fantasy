{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst,\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  limit(count) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  range(from, to) {\n    let {\n      foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n\n\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\n   * Return `data` as a string in CSV format.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n\n\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n\n\n  explain() {\n    let {\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n\n\n  rollback() {\n    var _a;\n\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","_a","trim","length"],"sourceRoot":"","sources":["../../src/PostgrestTransformBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}