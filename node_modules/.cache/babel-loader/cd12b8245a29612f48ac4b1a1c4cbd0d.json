{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\n\nconst noop = () => {};\n\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _a;\n\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.eventsPerSecondLimitMs = 100;\n    this.inThrottle = false;\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const eventsPerSecond = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.eventsPerSecond;\n    if (eventsPerSecond) this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond);\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this.onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n\n\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n\n      this.conn = null; // remove open handles\n\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n\n  getChannels() {\n    return this.channels;\n  }\n\n  removeChannel(channel) {\n    return channel.unsubscribe().then(status => {\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n\n      return status;\n    });\n  }\n\n  removeAllChannels() {\n    return Promise.all(this.channels.map(channel => channel.unsubscribe())).then(values => {\n      this.disconnect();\n      return values;\n    });\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Registers a callback for connection state change event.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket opened.\"))\n   */\n\n\n  onOpen(callback) {\n    this.stateChangeCallbacks.open.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket closed.\"))\n   */\n\n\n  onClose(callback) {\n    this.stateChangeCallbacks.close.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen((error) => console.log(\"An error occurred\"))\n   */\n\n\n  onError(callback) {\n    this.stateChangeCallbacks.error.push(callback);\n  }\n  /**\n   * Calls a function any time a message is received.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onMessage((message) => console.log(message))\n   */\n\n\n  onMessage(callback) {\n    this.stateChangeCallbacks.message.push(callback);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Retuns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   */\n\n\n  remove(channel) {\n    this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n  }\n\n  channel(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.isConnected()) {\n      this.connect();\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this.throttle(callback)();\n\n        if (isThrottled) {\n          return 'rate limited';\n        }\n      } else {\n        callback();\n      }\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel.isMember(topic)).forEach(channel => channel.trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /**\n   * Returns the URL of the websocket.\n   */\n\n\n  endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   */\n\n\n  makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n\n\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n\n      if (channel.joinedOnce && channel.isJoined()) {\n        channel.push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   */\n\n\n  leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c.isJoined() || c.isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this.endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel.trigger(CHANNEL_EVENTS.error));\n  }\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this.makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n\n  throttle(callback) {\n    let eventsPerSecondLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.eventsPerSecondLimitMs;\n    return () => {\n      if (this.inThrottle) return true;\n      callback();\n      this.inThrottle = true;\n      setTimeout(() => {\n        this.inThrottle = false;\n      }, eventsPerSecondLimit);\n      return false;\n    };\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,SACEC,GADF,EAEEC,cAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,gBARF,QASO,iBATP;AAUA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AA0BA,MAAMC,IAAI,GAAG,MAAK,CAAG,CAArB;;AAEA,eAAc,MAAOC,cAAP,CAAqB;EAkCjC;;;;;;;;;;;;;;EAcAC,YAAYC,QAAZ,EAA8BC,OAA9B,EAA+C;;;IA/C/C,mBAA6B,IAA7B;IACA,gBAA8B,EAA9B;IACA,gBAAmB,EAAnB;IACA,eAAsCT,eAAtC;IACA,cAAqC,EAArC;IACA,eAAkBF,eAAlB;IACA,iBAAiBL,YAAjB;IACA,2BAA8B,KAA9B;IACA,sBAA6DiB,SAA7D;IACA,2BAAqC,IAArC;IACA,WAAc,CAAd;IAEA,cAAmBL,IAAnB;IAIA,YAAyB,IAAzB;IACA,kBAAyB,EAAzB;IACA,kBAAyB,IAAIF,UAAJ,EAAzB;IACA,4BAKI;MACFQ,IAAI,EAAE,EADJ;MAEFC,KAAK,EAAE,EAFL;MAGFC,KAAK,EAAE,EAHL;MAIFC,OAAO,EAAE;IAJP,CALJ;IAWA,8BAAiC,GAAjC;IACA,kBAAsB,KAAtB;IAiBE,KAAKN,QAAL,GAAgB,GAAGA,QAAQ,IAAIZ,UAAU,CAACmB,SAAS,EAAnD;IAEA,IAAIN,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEO,MAAb,EAAqB,KAAKA,MAAL,GAAcP,OAAO,CAACO,MAAtB;IACrB,IAAIP,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEQ,OAAb,EAAsB,KAAKA,OAAL,GAAYC,gCAAQ,KAAKD,OAAb,GAAyBR,OAAO,CAACQ,OAAjC,CAAZ;IACtB,IAAIR,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEU,OAAb,EAAsB,KAAKA,OAAL,GAAeV,OAAO,CAACU,OAAvB;IACtB,IAAIV,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEW,MAAb,EAAqB,KAAKA,MAAL,GAAcX,OAAO,CAACW,MAAtB;IACrB,IAAIX,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEY,SAAb,EAAwB,KAAKA,SAAL,GAAiBZ,OAAO,CAACY,SAAzB;IACxB,IAAIZ,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEa,mBAAb,EACE,KAAKA,mBAAL,GAA2Bb,OAAO,CAACa,mBAAnC;IAEF,MAAMC,eAAe,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEP,MAAT,MAAe,IAAf,IAAeQ,aAAf,GAAe,MAAf,GAAeA,GAAED,eAAzC;IACA,IAAIA,eAAJ,EACE,KAAKE,sBAAL,GAA8BC,IAAI,CAACC,KAAL,CAAW,OAAOJ,eAAlB,CAA9B;IAEF,KAAKK,gBAAL,GAAwB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,gBAAT,IACpBnB,OAAO,CAACmB,gBADY,GAEnBC,KAAD,IAAkB;MAChB,OAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,EAA0BA,KAAK,GAAG,CAAlC,KAAwC,KAA/C;IACD,CAJL;IAKA,KAAKC,MAAL,GAAc,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,IACVrB,OAAO,CAACqB,MADE,GAEV,CAACC,OAAD,EAAgBC,QAAhB,KAAsC;MACpC,OAAOA,QAAQ,CAACC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAD,CAAf;IACD,CAJL;IAKA,KAAKI,MAAL,GAAc,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,IACV1B,OAAO,CAAC0B,MADE,GAEV,KAAKC,UAAL,CAAgBD,MAAhB,CAAuBE,IAAvB,CAA4B,KAAKD,UAAjC,CAFJ;IAGA,KAAKE,cAAL,GAAsB,IAAIpC,KAAJ,CAAU,MAAWqC;MACzC,KAAKC,UAAL;MACA,KAAKC,OAAL;IACD,CAH0C,CAArB,EAGnB,KAAKb,gBAHc,CAAtB;EAID;EAED;;;;;EAGAa,OAAO;IACL,IAAI,KAAKC,IAAT,EAAe;MACb;IACD;;IAED,KAAKA,IAAL,GAAY,IAAI,KAAKrB,SAAT,CAAmB,KAAKsB,WAAL,EAAnB,EAAuC,EAAvC,EAA2C,IAA3C,EAAiD,KAAK1B,OAAtD,CAAZ;;IAEA,IAAI,KAAKyB,IAAT,EAAe;MACb,KAAKA,IAAL,CAAUE,UAAV,GAAuB,aAAvB;;MACA,KAAKF,IAAL,CAAUG,MAAV,GAAmB,MAAM,KAAKC,WAAL,EAAzB;;MACA,KAAKJ,IAAL,CAAUK,OAAV,GAAqBlC,KAAD,IAAW,KAAKmC,YAAL,CAAkBnC,KAAlB,CAA/B;;MACA,KAAK6B,IAAL,CAAUO,SAAV,GAAuBC,KAAD,IAAW,KAAKC,aAAL,CAAmBD,KAAnB,CAAjC;;MACA,KAAKR,IAAL,CAAUU,OAAV,GAAqBF,KAAD,IAAW,KAAKG,YAAL,CAAkBH,KAAlB,CAA/B;IACD;EACF;EAED;;;;;;;;EAMAV,UAAU,CAACc,IAAD,EAAgBC,MAAhB,EAA+B;IACvC,IAAI,KAAKb,IAAT,EAAe;MACb,KAAKA,IAAL,CAAUU,OAAV,GAAoB,aAAc,CAAlC,CADa,CACsB;;;MACnC,IAAIE,IAAJ,EAAU;QACR,KAAKZ,IAAL,CAAU9B,KAAV,CAAgB0C,IAAhB,EAAsBC,MAAM,SAAN,UAAM,WAAN,YAAU,EAAhC;MACD,CAFD,MAEO;QACL,KAAKb,IAAL,CAAU9B,KAAV;MACD;;MACD,KAAK8B,IAAL,GAAY,IAAZ,CAPa,CAQb;;MACA,KAAKc,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;MACA,KAAKlB,cAAL,CAAoBoB,KAApB;IACD;EACF;;EAEDC,WAAW;IACT,OAAO,KAAKC,QAAZ;EACD;;EAEDC,aAAa,CACXC,OADW,EACa;IAExB,OAAOA,OAAO,CAACC,WAAR,GAAsBC,IAAtB,CAA4BC,MAAD,IAAW;MAC3C,IAAI,KAAKL,QAAL,CAAcM,MAAd,KAAyB,CAA7B,EAAgC;QAC9B,KAAK1B,UAAL;MACD;;MACD,OAAOyB,MAAP;IACD,CALM,CAAP;EAMD;;EAEDE,iBAAiB;IACf,OAAOC,OAAO,CAACC,GAAR,CACL,KAAKT,QAAL,CAAcU,GAAd,CAAmBR,OAAD,IAAaA,OAAO,CAACC,WAAR,EAA/B,CADK,EAELC,IAFK,CAECO,MAAD,IAAW;MAChB,KAAK/B,UAAL;MACA,OAAO+B,MAAP;IACD,CALM,CAAP;EAMD;EAED;;;;;;;EAKAC,GAAG,CAACC,IAAD,EAAeC,GAAf,EAA4BC,IAA5B,EAAsC;IACvC,KAAKvD,MAAL,CAAYqD,IAAZ,EAAkBC,GAAlB,EAAuBC,IAAvB;EACD;EAED;;;;;;;;;;EAQAC,MAAM,CAAC5C,QAAD,EAAmB;IACvB,KAAK6C,oBAAL,CAA0BlE,IAA1B,CAA+BmE,IAA/B,CAAoC9C,QAApC;EACD;EAED;;;;;;;;;;EAQA+C,OAAO,CAAC/C,QAAD,EAAmB;IACxB,KAAK6C,oBAAL,CAA0BjE,KAA1B,CAAgCkE,IAAhC,CAAqC9C,QAArC;EACD;EAED;;;;;;;;;;EAQAgD,OAAO,CAAChD,QAAD,EAAmB;IACxB,KAAK6C,oBAAL,CAA0BhE,KAA1B,CAAgCiE,IAAhC,CAAqC9C,QAArC;EACD;EAED;;;;;;;;;;EAQAiD,SAAS,CAACjD,QAAD,EAAmB;IAC1B,KAAK6C,oBAAL,CAA0B/D,OAA1B,CAAkCgE,IAAlC,CAAuC9C,QAAvC;EACD;EAED;;;;;EAGAkD,eAAe;IACb,QAAQ,KAAKxC,IAAL,IAAa,KAAKA,IAAL,CAAUyC,UAA/B;MACE,KAAKtF,aAAa,CAACuF,UAAnB;QACE,OAAOnF,gBAAgB,CAACoF,UAAxB;;MACF,KAAKxF,aAAa,CAACc,IAAnB;QACE,OAAOV,gBAAgB,CAACqF,IAAxB;;MACF,KAAKzF,aAAa,CAAC0F,OAAnB;QACE,OAAOtF,gBAAgB,CAACuF,OAAxB;;MACF;QACE,OAAOvF,gBAAgB,CAACwF,MAAxB;IARJ;EAUD;EAED;;;;;EAGAC,WAAW;IACT,OAAO,KAAKR,eAAL,OAA2BjF,gBAAgB,CAACqF,IAAnD;EACD;EAED;;;;;;;EAKAK,MAAM,CAAC7B,OAAD,EAAyB;IAC7B,KAAKF,QAAL,GAAgB,KAAKA,QAAL,CAAcgC,MAAd,CACbC,CAAD,IAAwBA,CAAC,CAACC,OAAF,OAAgBhC,OAAO,CAACgC,OAAR,EAD1B,CAAhB;EAGD;;EAEDhC,OAAO,CAACiC,KAAD,EAA0C;IAAA,IAA1B/E,MAA0B,uEAAF,EAAE;;IAC/C,IAAI,CAAC,KAAK0E,WAAL,EAAL,EAAyB;MACvB,KAAKjD,OAAL;IACD;;IAED,MAAMuD,IAAI,GAAG,IAAI5F,eAAJ,CAAoB,YAAY2F,KAAK,EAArC,EAAyC/E,MAAzC,EAAiD,IAAjD,CAAb;IACA,KAAK4C,QAAL,CAAckB,IAAd,CAAmBkB,IAAnB;IACA,OAAOA,IAAP;EACD;EAED;;;;;;;EAKAlB,IAAI,CAACH,IAAD,EAAc;IAChB,MAAM;MAAEoB,KAAF;MAAS7C,KAAT;MAAgBnB,OAAhB;MAAyBkE;IAAzB,IAAiCtB,IAAvC;;IACA,IAAI3C,QAAQ,GAAG,MAAK;MAClB,KAAKF,MAAL,CAAY6C,IAAZ,EAAmBuB,MAAD,IAAgB;;;QAChC,WAAKxD,IAAL,MAAS,IAAT,IAASlB,aAAT,GAAS,MAAT,GAASA,GAAE2E,IAAF,CAAOD,MAAP,CAAT;MACD,CAFD;IAGD,CAJD;;IAKA,KAAK1B,GAAL,CAAS,MAAT,EAAiB,GAAGuB,KAAK,IAAI7C,KAAK,KAAK+C,GAAG,GAA1C,EAA+ClE,OAA/C;;IACA,IAAI,KAAK2D,WAAL,EAAJ,EAAwB;MACtB,IAAI,CAAC,WAAD,EAAc,UAAd,EAA0B,kBAA1B,EAA8CU,QAA9C,CAAuDlD,KAAvD,CAAJ,EAAmE;QACjE,MAAMmD,WAAW,GAAG,KAAKC,QAAL,CAActE,QAAd,GAApB;;QACA,IAAIqE,WAAJ,EAAiB;UACf,OAAO,cAAP;QACD;MACF,CALD,MAKO;QACLrE,QAAQ;MACT;IACF,CATD,MASO;MACL,KAAKuE,UAAL,CAAgBzB,IAAhB,CAAqB9C,QAArB;IACD;EACF;;EAEDmB,aAAa,CAACqD,UAAD,EAA0B;IACrC,KAAKrE,MAAL,CAAYqE,UAAU,CAAC7B,IAAvB,EAA8BD,GAAD,IAAiB;MAC5C,IAAI;QAAEqB,KAAF;QAAS7C,KAAT;QAAgBnB,OAAhB;QAAyBkE;MAAzB,IAAiCvB,GAArC;;MAEA,IACGuB,GAAG,IAAIA,GAAG,KAAK,KAAKQ,mBAArB,IACAvD,KAAK,MAAKnB,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE2E,IAAd,CAFP,EAGE;QACA,KAAKD,mBAAL,GAA2B,IAA3B;MACD;;MAED,KAAKjC,GAAL,CACE,SADF,EAEE,GAAGzC,OAAO,CAACkC,MAAR,IAAkB,EAAE,IAAI8B,KAAK,IAAI7C,KAAK,IACtC+C,GAAG,IAAI,MAAMA,GAAN,GAAY,GAApB,IAA4B,EAC9B,EAJF,EAKElE,OALF;MAOA,KAAK6B,QAAL,CACGgC,MADH,CACW9B,OAAD,IAA8BA,OAAO,CAAC6C,QAAR,CAAiBZ,KAAjB,CADxC,EAEGa,OAFH,CAEY9C,OAAD,IACPA,OAAO,CAAC+C,OAAR,CAAgB3D,KAAhB,EAAuBnB,OAAvB,EAAgCkE,GAAhC,CAHJ;MAKA,KAAKpB,oBAAL,CAA0B/D,OAA1B,CAAkC8F,OAAlC,CAA2C5E,QAAD,IAAcA,QAAQ,CAAC0C,GAAD,CAAhE;IACD,CAvBD;EAwBD;EAED;;;;;EAGA/B,WAAW;IACT,OAAO,KAAKmE,aAAL,CACL,KAAKtG,QADA,EAELU,MAAM,CAAC6F,MAAP,CAAc,EAAd,EAAkB,KAAK/F,MAAvB,EAA+B;MAAEgG,GAAG,EAAEtH;IAAP,CAA/B,CAFK,CAAP;EAID;EAED;;;;;EAGAuH,OAAO;IACL,IAAIC,MAAM,GAAG,KAAKjB,GAAL,GAAW,CAAxB;;IACA,IAAIiB,MAAM,KAAK,KAAKjB,GAApB,EAAyB;MACvB,KAAKA,GAAL,GAAW,CAAX;IACD,CAFD,MAEO;MACL,KAAKA,GAAL,GAAWiB,MAAX;IACD;;IAED,OAAO,KAAKjB,GAAL,CAASkB,QAAT,EAAP;EACD;EAED;;;;;;;EAKAC,OAAO,CAACC,KAAD,EAAqB;IAC1B,KAAKC,WAAL,GAAmBD,KAAnB;IAEA,KAAKzD,QAAL,CAAcgD,OAAd,CAAuB9C,OAAD,IAAY;MAChCuD,KAAK,IAAIvD,OAAO,CAACyD,iBAAR,CAA0B;QAAEC,YAAY,EAAEH;MAAhB,CAA1B,CAAT;;MAEA,IAAIvD,OAAO,CAAC2D,UAAR,IAAsB3D,OAAO,CAAC4D,QAAR,EAA1B,EAA8C;QAC5C5D,OAAO,CAACgB,IAAR,CAAanF,cAAc,CAAC6H,YAA5B,EAA0C;UAAEA,YAAY,EAAEH;QAAhB,CAA1C;MACD;IACF,CAND;EAOD;EAED;;;;;EAGAM,cAAc,CAAC5B,KAAD,EAAc;IAC1B,IAAI6B,UAAU,GAAG,KAAKhE,QAAL,CAAciE,IAAd,CACdhC,CAAD,IAAOA,CAAC,CAACE,KAAF,KAAYA,KAAZ,KAAsBF,CAAC,CAAC6B,QAAF,MAAgB7B,CAAC,CAACiC,SAAF,EAAtC,CADQ,CAAjB;;IAGA,IAAIF,UAAJ,EAAgB;MACd,KAAKpD,GAAL,CAAS,WAAT,EAAsB,4BAA4BuB,KAAK,GAAvD;MACA6B,UAAU,CAAC7D,WAAX;IACD;EACF;;EAEOjB,WAAW;IACjB,KAAK0B,GAAL,CAAS,WAAT,EAAsB,gBAAgB,KAAK7B,WAAL,EAAkB,EAAxD;;IACA,KAAKoF,gBAAL;;IACA,KAAKzF,cAAL,CAAoBoB,KAApB;IACA,KAAKF,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;IACA,KAAKA,cAAL,GAAsBwE,WAAW,CAC/B,MAAM,KAAKC,cAAL,EADyB,EAE/B,KAAK3G,mBAF0B,CAAjC;IAIA,KAAKuD,oBAAL,CAA0BlE,IAA1B,CAA+BiG,OAA/B,CAAwC5E,QAAD,IAAcA,QAAQ,EAA7D;EACD;;EAEOqB,YAAY,CAACH,KAAD,EAAW;IAC7B,KAAKsB,GAAL,CAAS,WAAT,EAAsB,OAAtB,EAA+BtB,KAA/B;;IACA,KAAKgF,iBAAL;;IACA,KAAK1E,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;IACA,KAAKlB,cAAL,CAAoB6F,eAApB;IACA,KAAKtD,oBAAL,CAA0BjE,KAA1B,CAAgCgG,OAAhC,CAAyC5E,QAAD,IAAcA,QAAQ,CAACkB,KAAD,CAA9D;EACD;;EAEOF,YAAY,CAACnC,KAAD,EAAkB;IACpC,KAAK2D,GAAL,CAAS,WAAT,EAAsB3D,KAAK,CAACC,OAA5B;;IACA,KAAKoH,iBAAL;;IACA,KAAKrD,oBAAL,CAA0BhE,KAA1B,CAAgC+F,OAAhC,CAAyC5E,QAAD,IAAcA,QAAQ,CAACnB,KAAD,CAA9D;EACD;;EAEOqH,iBAAiB;IACvB,KAAKtE,QAAL,CAAcgD,OAAd,CAAuB9C,OAAD,IACpBA,OAAO,CAAC+C,OAAR,CAAgBlH,cAAc,CAACkB,KAA/B,CADF;EAGD;;EAEOiG,aAAa,CACnBsB,GADmB,EAEnBpH,MAFmB,EAEc;IAEjC,IAAIE,MAAM,CAACmH,IAAP,CAAYrH,MAAZ,EAAoBkD,MAApB,KAA+B,CAAnC,EAAsC;MACpC,OAAOkE,GAAP;IACD;;IACD,MAAME,MAAM,GAAGF,GAAG,CAACG,KAAJ,CAAU,IAAV,IAAkB,GAAlB,GAAwB,GAAvC;IACA,MAAMC,KAAK,GAAG,IAAIC,eAAJ,CAAoBzH,MAApB,CAAd;IAEA,OAAO,GAAGoH,GAAG,GAAGE,MAAM,GAAGE,KAAK,EAA9B;EACD;;EAEOT,gBAAgB;IACtB,IAAI,KAAKrC,WAAL,MAAsB,KAAKa,UAAL,CAAgBrC,MAAhB,GAAyB,CAAnD,EAAsD;MACpD,KAAKqC,UAAL,CAAgBK,OAAhB,CAAyB5E,QAAD,IAAcA,QAAQ,EAA9C;MACA,KAAKuE,UAAL,GAAkB,EAAlB;IACD;EACF;;EAEO0B,cAAc;;;IACpB,IAAI,CAAC,KAAKvC,WAAL,EAAL,EAAyB;MACvB;IACD;;IACD,IAAI,KAAKe,mBAAT,EAA8B;MAC5B,KAAKA,mBAAL,GAA2B,IAA3B;MACA,KAAKjC,GAAL,CACE,WADF,EAEE,0DAFF;MAIA,WAAK9B,IAAL,MAAS,IAAT,IAASlB,aAAT,GAAS,MAAT,GAASA,GAAEZ,KAAF,CAAQb,eAAR,EAAyB,kBAAzB,CAAT;MACA;IACD;;IACD,KAAK0G,mBAAL,GAA2B,KAAKQ,OAAL,EAA3B;IACA,KAAKnC,IAAL,CAAU;MACRiB,KAAK,EAAE,SADC;MAER7C,KAAK,EAAE,WAFC;MAGRnB,OAAO,EAAE,EAHD;MAIRkE,GAAG,EAAE,KAAKQ;IAJF,CAAV;IAMA,KAAKW,OAAL,CAAa,KAAKE,WAAlB;EACD;;EAEOhB,QAAQ,CACdtE,QADc,EAE4C;IAAA,IAA1D0G,oBAA0D,uEAA3B,KAAKjH,sBAAsB;IAE1D,OAAO,MAAK;MACV,IAAI,KAAKkH,UAAT,EAAqB,OAAO,IAAP;MACrB3G,QAAQ;MACR,KAAK2G,UAAL,GAAkB,IAAlB;MACAC,UAAU,CAAC,MAAK;QACd,KAAKD,UAAL,GAAkB,KAAlB;MACD,CAFS,EAEPD,oBAFO,CAAV;MAGA,OAAO,KAAP;IACD,CARD;EASD;;AA3bgC","names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","websocket","params","headers","Object","timeout","logger","transport","heartbeatIntervalMs","eventsPerSecond","_a","eventsPerSecondLimitMs","Math","floor","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","__awaiter","disconnect","connect","conn","endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","onConnMessage","onclose","_onConnClose","code","reason","heartbeatTimer","clearInterval","reset","getChannels","channels","removeChannel","channel","unsubscribe","then","status","length","removeAllChannels","Promise","all","map","values","log","kind","msg","data","onOpen","stateChangeCallbacks","push","onClose","onError","onMessage","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","remove","filter","c","joinRef","topic","chan","ref","result","send","includes","isThrottled","throttle","sendBuffer","rawMessage","pendingHeartbeatRef","type","isMember","forEach","trigger","_appendParams","assign","vsn","makeRef","newRef","toString","setAuth","token","accessToken","updateJoinPayload","access_token","joinedOnce","isJoined","leaveOpenTopic","dupChannel","find","isJoining","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","eventsPerSecondLimit","inThrottle","setTimeout"],"sourceRoot":"","sources":["../../src/RealtimeClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}